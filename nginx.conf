user  nginx nginx; #运行nginx的用户和组
worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000; 

#2核是 01，四核是0001，8核是00000001，有多少个核，就有几位数，1表示该内核开启，0表示该内核关闭。worker_processes最多开启8个，8个以上性能提升不会再提升了，而且稳定性变得更低，所以8个进程够用了
#######################################################################################
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#error_log 日志分为
#
#nginx的log有以下几种类型： [ debug | info | notice | warn | error | crit ] 
#在nginx.conf的设置：error_log logs/error.log  debug;
#debug 为最详细 crit最少
#
error_log  /var/log/nginx/error.log  debug;
#######################################################################################
pid        /var/run/nginx.pid;

worker_rlimit_nofile 65535;
#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数目(ulimit -n)与nginx进程相除,但nginx分配请求并不是那么均匀,推荐与ulimit -n一致



events {
    use epoll;         #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    #工作模式有：
 #select(标准模式), 
        #poll(标准模式), 
 #kqueue(高效模式，适用FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 and MacOS X),
 #epoll(高效模式，适用Linux 2.6+,SuSE 8.2,), 
        #/dev/poll(高效模式,适用Solaris 7 11/99+,HP/UX 11.22+)
 #eventport(IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+)

    worker_connections  65535; #单个后台worker process进程的最大并发链接数
}


http {
    include       mime.types; #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型

    charset utf-8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；
    #$remote_user：用来记录客户端用户名称；
    #$request： 用来记录请求的url与http协议；
    #$status： 用来记录请求状态；成功是200，
    #$body_bytes_s ent：记录发送给客户端文件主体内容大小；
    #$http_referer：用来记录从那个页面链接访问过来的；
    #$http_user_agent：记录客户毒啊浏览器的相关信息；

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.

    tcp_nopush     on; #与tcp_nodelay 相互排斥,原理待写

    client_header_buffer_size 16k;
    large_client_header_buffers 4 32k; #nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取.
    client_header_timeout 10; #设置客户端请求头读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误。
    client_body_timeout 10; #设置客户端请求主体读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误，默认值是60。
    client_max_body_size 30M;
 #最大上传文件大小
 
    #keepalive_timeout  0;
    #连接超时时间
    keepalive_timeout  65;

######fastcgi#########################################
#FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口(原理见[还没有写])#
#以下是FastCgi优化配置指令,目的是保证nginx下的php环境更加高效稳定
    fastcgi_cache_path /var/logs/nginx/fastcgi_cache levels=1:2 keys_zone=fastcgi_cache:10m inactive=5m;   #为FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间和非活动删除时间。 
    fastcgi_connect_timeout 300;    #指定连接到后端FastCGI的超时时间。
    fastcgi_send_timeout 300;    #定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。
    fastcgi_read_timeout 300;    #定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间。
    fastcgi_buffer_size 64k;    #用于指定读取FastCGI应答第一部分需要用多大的缓冲区，这个值表示将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为fastcgi_buffers选项指定的缓冲区大小。
    fastcgi_buffers 4 64k;    #指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。
    fastcgi_busy_buffers_size 128k;    #默认值是fastcgi_buffers的两倍。
    fastcgi_temp_file_write_size 128k;    #表示在写入缓存文件时使用多大的数据块，默认值是fastcgi_buffers的两倍。
    fastcgi_cache fastcgi_cache;    #表示开启FastCGI缓存并为其指定一个名称。

 #用来指定应答代码的缓存时间，以下值表示将200和302应答缓存一个小时，将301应答缓存1天，其他应答均缓存1分钟。
    fastcgi_cache_valid 200 302 1h;    
    fastcgi_cache_valid 301 1d;    
    fastcgi_cache_valid any 1m;    
    fastcgi_intercept_errors on;
    #如果没有此项，静态文件会返回404,而php页会返回空白

############################GZIP##################################################

    gzip_static on; #开启后,nginx首先检查请求的静态文件是否有gz文件
    gzip_comp_level 4; #[1-9]级别越高压缩率越高,太高比较耗cpu,4足够
    gzip_min_length   1024k; #大于这个值的页面压缩
    gzip_proxied any;
    #Nginx做为反向代理的时候启用，
    #param:off|expired|no-cache|no-sotre|private|no_last_modified|no_etag|auth|any]
    #expample:gzip_proxied no-cache;
    #off – 关闭所有的代理结果数据压缩
    #expired – 启用压缩，如果header中包含”Expires”头信息
    #no-cache – 启用压缩，如果header中包含”Cache-Control:no-cache”头信息
    #no-store – 启用压缩，如果header中包含”Cache-Control:no-store”头信息
    #private – 启用压缩，如果header中包含”Cache-Control:private”头信息
    #no_last_modified – 启用压缩，如果header中包含”Last_Modified”头信息
    #no_etag – 启用压缩，如果header中包含“ETag”头信息
    #auth – 启用压缩，如果header中包含“Authorization”头信息
    #any – 无条件压缩所有结果数据*/

    gzip_buffers   4 8k; #代表已8k为单位，按块大小的4倍申请内存。
    gzip_http_version 1.0; #设置支持http协议版本
    gzip_disable "msie6"; #禁用对ie6的gzip压缩
    gzip_vary on; #根据客户端的http头判断用户的浏览器是否支持gzip压缩,不支持则不压缩
    gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php image/jpeg image/gif image/png;
#########################upstream#################################################

    upstream img_relay {
    server 127.0.0.1:8027;
    server 127.0.0.1:8028;
    server 127.0.0.1:8029;
    hash $request_uri;
    }
    1、轮询（默认）
    每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    2、weight
    指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
    例如：
    upstream bakend {
    server 192.168.0.14 weight=10;
    server 192.168.0.15 weight=10;
    }
    2、ip_hash
    每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
    例如：
    upstream bakend {
    ip_hash;
    server 192.168.0.14:88;
    server 192.168.0.15:80;
    }

    3、fair（第三方）
    按后端服务器的响应时间来分配请求，响应时间短的优先分配。
    upstream backend {
    server server1;
    server server2;
    fair;
    }

    4、url_hash（第三方）

    按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。

    例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法

    upstream backend {
    server squid1:3128;
    server squid2:3128;
    hash $request_uri;
    hash_method crc32;
    }

    tips:

    upstream bakend{#定义负载均衡设备的Ip及设备状态
    ip_hash;
    server 127.0.0.1:9090 down;
    server 127.0.0.1:8080 weight=2;
    server 127.0.0.1:6060;
    server 127.0.0.1:7070 backup;
    }
    在需要使用负载均衡的server中增加
    proxy_pass http://bakend/;

    每个设备的状态设置为:
    1.down表示单前的server暂时不参与负载
    2.weight默认为1.weight越大，负载的权重就越大。
    3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误
    4.fail_timeout:max_fails次失败后，暂停的时间。
    5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。

    nginx支持同时设置多组的负载均衡，用来给不用的server来使用。

    client_body_in_file_only设置为On可以讲client post过来的数据记录到文件中用来做debug
    client_body_temp_path设置记录文件的目录 可以设置最多3层目录

    location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡

    error_page 404 =404 http://www.ecjtu.net/404.php; 
    include sites-enabled/*; #包含server配置
    #server标准配置参见/site-available
}
